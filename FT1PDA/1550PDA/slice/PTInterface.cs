// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `PTInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace PT
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public enum InOutMode
    {
        INLIB,
        OUTLIB
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class TruckCls : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string carNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string HeadDirection;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string TruckPosition;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare2;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public TruckCls()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public TruckCls(string carNo, string HeadDirection, string TruckPosition, string sqare1, string sqare2)
        {
            this.carNo = carNo;
            this.HeadDirection = HeadDirection;
            this.TruckPosition = TruckPosition;
            this.sqare1 = sqare1;
            this.sqare2 = sqare2;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::TruckCls");
            IceInternal.HashUtil.hashAdd(ref h__, carNo);
            IceInternal.HashUtil.hashAdd(ref h__, HeadDirection);
            IceInternal.HashUtil.hashAdd(ref h__, TruckPosition);
            IceInternal.HashUtil.hashAdd(ref h__, sqare1);
            IceInternal.HashUtil.hashAdd(ref h__, sqare2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            TruckCls o__ = (TruckCls)other__;
            if(carNo == null)
            {
                if(o__.carNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!carNo.Equals(o__.carNo))
                {
                    return false;
                }
            }
            if(HeadDirection == null)
            {
                if(o__.HeadDirection != null)
                {
                    return false;
                }
            }
            else
            {
                if(!HeadDirection.Equals(o__.HeadDirection))
                {
                    return false;
                }
            }
            if(TruckPosition == null)
            {
                if(o__.TruckPosition != null)
                {
                    return false;
                }
            }
            else
            {
                if(!TruckPosition.Equals(o__.TruckPosition))
                {
                    return false;
                }
            }
            if(sqare1 == null)
            {
                if(o__.sqare1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare1.Equals(o__.sqare1))
                {
                    return false;
                }
            }
            if(sqare2 == null)
            {
                if(o__.sqare2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare2.Equals(o__.sqare2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(TruckCls lhs__, TruckCls rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(TruckCls lhs__, TruckCls rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(carNo);
            os__.writeString(HeadDirection);
            os__.writeString(TruckPosition);
            os__.writeString(sqare1);
            os__.writeString(sqare2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            carNo = is__.readString();
            HeadDirection = is__.readString();
            TruckPosition = is__.readString();
            sqare1 = is__.readString();
            sqare2 = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class dtUnit : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string StoreID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string Location;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string BigAreaNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string UnitNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int layer;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare2;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtUnit()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtUnit(string StoreID, string Location, string BigAreaNO, string UnitNo, int layer, string sqare1, string sqare2)
        {
            this.StoreID = StoreID;
            this.Location = Location;
            this.BigAreaNO = BigAreaNO;
            this.UnitNo = UnitNo;
            this.layer = layer;
            this.sqare1 = sqare1;
            this.sqare2 = sqare2;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::dtUnit");
            IceInternal.HashUtil.hashAdd(ref h__, StoreID);
            IceInternal.HashUtil.hashAdd(ref h__, Location);
            IceInternal.HashUtil.hashAdd(ref h__, BigAreaNO);
            IceInternal.HashUtil.hashAdd(ref h__, UnitNo);
            IceInternal.HashUtil.hashAdd(ref h__, layer);
            IceInternal.HashUtil.hashAdd(ref h__, sqare1);
            IceInternal.HashUtil.hashAdd(ref h__, sqare2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            dtUnit o__ = (dtUnit)other__;
            if(StoreID == null)
            {
                if(o__.StoreID != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StoreID.Equals(o__.StoreID))
                {
                    return false;
                }
            }
            if(Location == null)
            {
                if(o__.Location != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Location.Equals(o__.Location))
                {
                    return false;
                }
            }
            if(BigAreaNO == null)
            {
                if(o__.BigAreaNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!BigAreaNO.Equals(o__.BigAreaNO))
                {
                    return false;
                }
            }
            if(UnitNo == null)
            {
                if(o__.UnitNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!UnitNo.Equals(o__.UnitNo))
                {
                    return false;
                }
            }
            if(!layer.Equals(o__.layer))
            {
                return false;
            }
            if(sqare1 == null)
            {
                if(o__.sqare1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare1.Equals(o__.sqare1))
                {
                    return false;
                }
            }
            if(sqare2 == null)
            {
                if(o__.sqare2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare2.Equals(o__.sqare2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(dtUnit lhs__, dtUnit rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(dtUnit lhs__, dtUnit rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(StoreID);
            os__.writeString(Location);
            os__.writeString(BigAreaNO);
            os__.writeString(UnitNo);
            os__.writeInt(layer);
            os__.writeString(sqare1);
            os__.writeString(sqare2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            StoreID = is__.readString();
            Location = is__.readString();
            BigAreaNO = is__.readString();
            UnitNo = is__.readString();
            layer = is__.readInt();
            sqare1 = is__.readString();
            sqare2 = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class MatterCls : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string status;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string matno;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PT.dtUnit stcUnit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PT.TruckCls InPosition;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PT.TruckCls OutPosition;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string InGroove;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string OutGroove;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public bool state;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int ackflag;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string l3lack;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string cQualityCode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sleeve;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public bool isUnload;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public bool PackageState;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string direction;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int xPostion;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int yPostion;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int zPostion;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int rowNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int frameNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int width;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int weight;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string shape;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int insideDia;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int outsideDia;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string packCode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string planNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string MatName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string ManuUnit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string NextUnitno;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string ContractNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare2;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public MatterCls()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public MatterCls(string status, string matno, PT.dtUnit stcUnit, PT.TruckCls InPosition, PT.TruckCls OutPosition, string InGroove, string OutGroove, bool state, int ackflag, string l3lack, string cQualityCode, string sleeve, bool isUnload, bool PackageState, string direction, int xPostion, int yPostion, int zPostion, int rowNo, int frameNo, int width, int weight, string shape, int insideDia, int outsideDia, string packCode, string planNo, string MatName, string ManuUnit, string NextUnitno, string ContractNo, string sqare1, string sqare2)
        {
            this.status = status;
            this.matno = matno;
            this.stcUnit = stcUnit;
            this.InPosition = InPosition;
            this.OutPosition = OutPosition;
            this.InGroove = InGroove;
            this.OutGroove = OutGroove;
            this.state = state;
            this.ackflag = ackflag;
            this.l3lack = l3lack;
            this.cQualityCode = cQualityCode;
            this.sleeve = sleeve;
            this.isUnload = isUnload;
            this.PackageState = PackageState;
            this.direction = direction;
            this.xPostion = xPostion;
            this.yPostion = yPostion;
            this.zPostion = zPostion;
            this.rowNo = rowNo;
            this.frameNo = frameNo;
            this.width = width;
            this.weight = weight;
            this.shape = shape;
            this.insideDia = insideDia;
            this.outsideDia = outsideDia;
            this.packCode = packCode;
            this.planNo = planNo;
            this.MatName = MatName;
            this.ManuUnit = ManuUnit;
            this.NextUnitno = NextUnitno;
            this.ContractNo = ContractNo;
            this.sqare1 = sqare1;
            this.sqare2 = sqare2;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::MatterCls");
            IceInternal.HashUtil.hashAdd(ref h__, status);
            IceInternal.HashUtil.hashAdd(ref h__, matno);
            IceInternal.HashUtil.hashAdd(ref h__, stcUnit);
            IceInternal.HashUtil.hashAdd(ref h__, InPosition);
            IceInternal.HashUtil.hashAdd(ref h__, OutPosition);
            IceInternal.HashUtil.hashAdd(ref h__, InGroove);
            IceInternal.HashUtil.hashAdd(ref h__, OutGroove);
            IceInternal.HashUtil.hashAdd(ref h__, state);
            IceInternal.HashUtil.hashAdd(ref h__, ackflag);
            IceInternal.HashUtil.hashAdd(ref h__, l3lack);
            IceInternal.HashUtil.hashAdd(ref h__, cQualityCode);
            IceInternal.HashUtil.hashAdd(ref h__, sleeve);
            IceInternal.HashUtil.hashAdd(ref h__, isUnload);
            IceInternal.HashUtil.hashAdd(ref h__, PackageState);
            IceInternal.HashUtil.hashAdd(ref h__, direction);
            IceInternal.HashUtil.hashAdd(ref h__, xPostion);
            IceInternal.HashUtil.hashAdd(ref h__, yPostion);
            IceInternal.HashUtil.hashAdd(ref h__, zPostion);
            IceInternal.HashUtil.hashAdd(ref h__, rowNo);
            IceInternal.HashUtil.hashAdd(ref h__, frameNo);
            IceInternal.HashUtil.hashAdd(ref h__, width);
            IceInternal.HashUtil.hashAdd(ref h__, weight);
            IceInternal.HashUtil.hashAdd(ref h__, shape);
            IceInternal.HashUtil.hashAdd(ref h__, insideDia);
            IceInternal.HashUtil.hashAdd(ref h__, outsideDia);
            IceInternal.HashUtil.hashAdd(ref h__, packCode);
            IceInternal.HashUtil.hashAdd(ref h__, planNo);
            IceInternal.HashUtil.hashAdd(ref h__, MatName);
            IceInternal.HashUtil.hashAdd(ref h__, ManuUnit);
            IceInternal.HashUtil.hashAdd(ref h__, NextUnitno);
            IceInternal.HashUtil.hashAdd(ref h__, ContractNo);
            IceInternal.HashUtil.hashAdd(ref h__, sqare1);
            IceInternal.HashUtil.hashAdd(ref h__, sqare2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            MatterCls o__ = (MatterCls)other__;
            if(status == null)
            {
                if(o__.status != null)
                {
                    return false;
                }
            }
            else
            {
                if(!status.Equals(o__.status))
                {
                    return false;
                }
            }
            if(matno == null)
            {
                if(o__.matno != null)
                {
                    return false;
                }
            }
            else
            {
                if(!matno.Equals(o__.matno))
                {
                    return false;
                }
            }
            if(stcUnit == null)
            {
                if(o__.stcUnit != null)
                {
                    return false;
                }
            }
            else
            {
                if(!stcUnit.Equals(o__.stcUnit))
                {
                    return false;
                }
            }
            if(InPosition == null)
            {
                if(o__.InPosition != null)
                {
                    return false;
                }
            }
            else
            {
                if(!InPosition.Equals(o__.InPosition))
                {
                    return false;
                }
            }
            if(OutPosition == null)
            {
                if(o__.OutPosition != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OutPosition.Equals(o__.OutPosition))
                {
                    return false;
                }
            }
            if(InGroove == null)
            {
                if(o__.InGroove != null)
                {
                    return false;
                }
            }
            else
            {
                if(!InGroove.Equals(o__.InGroove))
                {
                    return false;
                }
            }
            if(OutGroove == null)
            {
                if(o__.OutGroove != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OutGroove.Equals(o__.OutGroove))
                {
                    return false;
                }
            }
            if(!state.Equals(o__.state))
            {
                return false;
            }
            if(!ackflag.Equals(o__.ackflag))
            {
                return false;
            }
            if(l3lack == null)
            {
                if(o__.l3lack != null)
                {
                    return false;
                }
            }
            else
            {
                if(!l3lack.Equals(o__.l3lack))
                {
                    return false;
                }
            }
            if(cQualityCode == null)
            {
                if(o__.cQualityCode != null)
                {
                    return false;
                }
            }
            else
            {
                if(!cQualityCode.Equals(o__.cQualityCode))
                {
                    return false;
                }
            }
            if(sleeve == null)
            {
                if(o__.sleeve != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sleeve.Equals(o__.sleeve))
                {
                    return false;
                }
            }
            if(!isUnload.Equals(o__.isUnload))
            {
                return false;
            }
            if(!PackageState.Equals(o__.PackageState))
            {
                return false;
            }
            if(direction == null)
            {
                if(o__.direction != null)
                {
                    return false;
                }
            }
            else
            {
                if(!direction.Equals(o__.direction))
                {
                    return false;
                }
            }
            if(!xPostion.Equals(o__.xPostion))
            {
                return false;
            }
            if(!yPostion.Equals(o__.yPostion))
            {
                return false;
            }
            if(!zPostion.Equals(o__.zPostion))
            {
                return false;
            }
            if(!rowNo.Equals(o__.rowNo))
            {
                return false;
            }
            if(!frameNo.Equals(o__.frameNo))
            {
                return false;
            }
            if(!width.Equals(o__.width))
            {
                return false;
            }
            if(!weight.Equals(o__.weight))
            {
                return false;
            }
            if(shape == null)
            {
                if(o__.shape != null)
                {
                    return false;
                }
            }
            else
            {
                if(!shape.Equals(o__.shape))
                {
                    return false;
                }
            }
            if(!insideDia.Equals(o__.insideDia))
            {
                return false;
            }
            if(!outsideDia.Equals(o__.outsideDia))
            {
                return false;
            }
            if(packCode == null)
            {
                if(o__.packCode != null)
                {
                    return false;
                }
            }
            else
            {
                if(!packCode.Equals(o__.packCode))
                {
                    return false;
                }
            }
            if(planNo == null)
            {
                if(o__.planNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!planNo.Equals(o__.planNo))
                {
                    return false;
                }
            }
            if(MatName == null)
            {
                if(o__.MatName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!MatName.Equals(o__.MatName))
                {
                    return false;
                }
            }
            if(ManuUnit == null)
            {
                if(o__.ManuUnit != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ManuUnit.Equals(o__.ManuUnit))
                {
                    return false;
                }
            }
            if(NextUnitno == null)
            {
                if(o__.NextUnitno != null)
                {
                    return false;
                }
            }
            else
            {
                if(!NextUnitno.Equals(o__.NextUnitno))
                {
                    return false;
                }
            }
            if(ContractNo == null)
            {
                if(o__.ContractNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ContractNo.Equals(o__.ContractNo))
                {
                    return false;
                }
            }
            if(sqare1 == null)
            {
                if(o__.sqare1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare1.Equals(o__.sqare1))
                {
                    return false;
                }
            }
            if(sqare2 == null)
            {
                if(o__.sqare2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare2.Equals(o__.sqare2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(MatterCls lhs__, MatterCls rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(MatterCls lhs__, MatterCls rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(status);
            os__.writeString(matno);
            if(stcUnit == null)
            {
                PT.dtUnit tmp__ = new PT.dtUnit();
                tmp__.write__(os__);
            }
            else
            {
                stcUnit.write__(os__);
            }
            if(InPosition == null)
            {
                PT.TruckCls tmp__ = new PT.TruckCls();
                tmp__.write__(os__);
            }
            else
            {
                InPosition.write__(os__);
            }
            if(OutPosition == null)
            {
                PT.TruckCls tmp__ = new PT.TruckCls();
                tmp__.write__(os__);
            }
            else
            {
                OutPosition.write__(os__);
            }
            os__.writeString(InGroove);
            os__.writeString(OutGroove);
            os__.writeBool(state);
            os__.writeInt(ackflag);
            os__.writeString(l3lack);
            os__.writeString(cQualityCode);
            os__.writeString(sleeve);
            os__.writeBool(isUnload);
            os__.writeBool(PackageState);
            os__.writeString(direction);
            os__.writeInt(xPostion);
            os__.writeInt(yPostion);
            os__.writeInt(zPostion);
            os__.writeInt(rowNo);
            os__.writeInt(frameNo);
            os__.writeInt(width);
            os__.writeInt(weight);
            os__.writeString(shape);
            os__.writeInt(insideDia);
            os__.writeInt(outsideDia);
            os__.writeString(packCode);
            os__.writeString(planNo);
            os__.writeString(MatName);
            os__.writeString(ManuUnit);
            os__.writeString(NextUnitno);
            os__.writeString(ContractNo);
            os__.writeString(sqare1);
            os__.writeString(sqare2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            status = is__.readString();
            matno = is__.readString();
            if(stcUnit == null)
            {
                stcUnit = new PT.dtUnit();
            }
            stcUnit.read__(is__);
            if(InPosition == null)
            {
                InPosition = new PT.TruckCls();
            }
            InPosition.read__(is__);
            if(OutPosition == null)
            {
                OutPosition = new PT.TruckCls();
            }
            OutPosition.read__(is__);
            InGroove = is__.readString();
            OutGroove = is__.readString();
            state = is__.readBool();
            ackflag = is__.readInt();
            l3lack = is__.readString();
            cQualityCode = is__.readString();
            sleeve = is__.readString();
            isUnload = is__.readBool();
            PackageState = is__.readBool();
            direction = is__.readString();
            xPostion = is__.readInt();
            yPostion = is__.readInt();
            zPostion = is__.readInt();
            rowNo = is__.readInt();
            frameNo = is__.readInt();
            width = is__.readInt();
            weight = is__.readInt();
            shape = is__.readString();
            insideDia = is__.readInt();
            outsideDia = is__.readInt();
            packCode = is__.readString();
            planNo = is__.readString();
            MatName = is__.readString();
            ManuUnit = is__.readString();
            NextUnitno = is__.readString();
            ContractNo = is__.readString();
            sqare1 = is__.readString();
            sqare2 = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class dtPTCommon : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string StoreID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PTID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string Shift;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string Crew;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string @Operator;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string TimeOper;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string Privilege;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare2;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtPTCommon()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtPTCommon(string StoreID, string PTID, string Shift, string Crew, string @Operator, string TimeOper, string Privilege, string sqare1, string sqare2)
        {
            this.StoreID = StoreID;
            this.PTID = PTID;
            this.Shift = Shift;
            this.Crew = Crew;
            this.@Operator = @Operator;
            this.TimeOper = TimeOper;
            this.Privilege = Privilege;
            this.sqare1 = sqare1;
            this.sqare2 = sqare2;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::dtPTCommon");
            IceInternal.HashUtil.hashAdd(ref h__, StoreID);
            IceInternal.HashUtil.hashAdd(ref h__, PTID);
            IceInternal.HashUtil.hashAdd(ref h__, Shift);
            IceInternal.HashUtil.hashAdd(ref h__, Crew);
            IceInternal.HashUtil.hashAdd(ref h__, @Operator);
            IceInternal.HashUtil.hashAdd(ref h__, TimeOper);
            IceInternal.HashUtil.hashAdd(ref h__, Privilege);
            IceInternal.HashUtil.hashAdd(ref h__, sqare1);
            IceInternal.HashUtil.hashAdd(ref h__, sqare2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            dtPTCommon o__ = (dtPTCommon)other__;
            if(StoreID == null)
            {
                if(o__.StoreID != null)
                {
                    return false;
                }
            }
            else
            {
                if(!StoreID.Equals(o__.StoreID))
                {
                    return false;
                }
            }
            if(PTID == null)
            {
                if(o__.PTID != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PTID.Equals(o__.PTID))
                {
                    return false;
                }
            }
            if(Shift == null)
            {
                if(o__.Shift != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Shift.Equals(o__.Shift))
                {
                    return false;
                }
            }
            if(Crew == null)
            {
                if(o__.Crew != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Crew.Equals(o__.Crew))
                {
                    return false;
                }
            }
            if(@Operator == null)
            {
                if(o__.@Operator != null)
                {
                    return false;
                }
            }
            else
            {
                if(!@Operator.Equals(o__.@Operator))
                {
                    return false;
                }
            }
            if(TimeOper == null)
            {
                if(o__.TimeOper != null)
                {
                    return false;
                }
            }
            else
            {
                if(!TimeOper.Equals(o__.TimeOper))
                {
                    return false;
                }
            }
            if(Privilege == null)
            {
                if(o__.Privilege != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Privilege.Equals(o__.Privilege))
                {
                    return false;
                }
            }
            if(sqare1 == null)
            {
                if(o__.sqare1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare1.Equals(o__.sqare1))
                {
                    return false;
                }
            }
            if(sqare2 == null)
            {
                if(o__.sqare2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare2.Equals(o__.sqare2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(dtPTCommon lhs__, dtPTCommon rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(dtPTCommon lhs__, dtPTCommon rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(StoreID);
            os__.writeString(PTID);
            os__.writeString(Shift);
            os__.writeString(Crew);
            os__.writeString(@Operator);
            os__.writeString(TimeOper);
            os__.writeString(Privilege);
            os__.writeString(sqare1);
            os__.writeString(sqare2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            StoreID = is__.readString();
            PTID = is__.readString();
            Shift = is__.readString();
            Crew = is__.readString();
            @Operator = is__.readString();
            TimeOper = is__.readString();
            Privilege = is__.readString();
            sqare1 = is__.readString();
            sqare2 = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class dtOutPlan : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public bool state;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string matterNo;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PlanNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PT.dtUnit stcUnit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string LayerNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PlanTIME;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string ShipCNAME;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string OutStoreID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string InStoreID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string MatType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string ShipLotNUM;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string HAVEN;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PIECE;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string GrossWEIGHT;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string NetWEIGHT;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string TransTYPE;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string FlagStraightFilling;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PlanStatus;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare2;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtOutPlan()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtOutPlan(bool state, string matterNo, string PlanNO, PT.dtUnit stcUnit, string LayerNO, string PlanTIME, string ShipCNAME, string OutStoreID, string InStoreID, string MatType, string ShipLotNUM, string HAVEN, string PIECE, string GrossWEIGHT, string NetWEIGHT, string TransTYPE, string FlagStraightFilling, string PlanStatus, string sqare1, string sqare2)
        {
            this.state = state;
            this.matterNo = matterNo;
            this.PlanNO = PlanNO;
            this.stcUnit = stcUnit;
            this.LayerNO = LayerNO;
            this.PlanTIME = PlanTIME;
            this.ShipCNAME = ShipCNAME;
            this.OutStoreID = OutStoreID;
            this.InStoreID = InStoreID;
            this.MatType = MatType;
            this.ShipLotNUM = ShipLotNUM;
            this.HAVEN = HAVEN;
            this.PIECE = PIECE;
            this.GrossWEIGHT = GrossWEIGHT;
            this.NetWEIGHT = NetWEIGHT;
            this.TransTYPE = TransTYPE;
            this.FlagStraightFilling = FlagStraightFilling;
            this.PlanStatus = PlanStatus;
            this.sqare1 = sqare1;
            this.sqare2 = sqare2;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::dtOutPlan");
            IceInternal.HashUtil.hashAdd(ref h__, state);
            IceInternal.HashUtil.hashAdd(ref h__, matterNo);
            IceInternal.HashUtil.hashAdd(ref h__, PlanNO);
            IceInternal.HashUtil.hashAdd(ref h__, stcUnit);
            IceInternal.HashUtil.hashAdd(ref h__, LayerNO);
            IceInternal.HashUtil.hashAdd(ref h__, PlanTIME);
            IceInternal.HashUtil.hashAdd(ref h__, ShipCNAME);
            IceInternal.HashUtil.hashAdd(ref h__, OutStoreID);
            IceInternal.HashUtil.hashAdd(ref h__, InStoreID);
            IceInternal.HashUtil.hashAdd(ref h__, MatType);
            IceInternal.HashUtil.hashAdd(ref h__, ShipLotNUM);
            IceInternal.HashUtil.hashAdd(ref h__, HAVEN);
            IceInternal.HashUtil.hashAdd(ref h__, PIECE);
            IceInternal.HashUtil.hashAdd(ref h__, GrossWEIGHT);
            IceInternal.HashUtil.hashAdd(ref h__, NetWEIGHT);
            IceInternal.HashUtil.hashAdd(ref h__, TransTYPE);
            IceInternal.HashUtil.hashAdd(ref h__, FlagStraightFilling);
            IceInternal.HashUtil.hashAdd(ref h__, PlanStatus);
            IceInternal.HashUtil.hashAdd(ref h__, sqare1);
            IceInternal.HashUtil.hashAdd(ref h__, sqare2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            dtOutPlan o__ = (dtOutPlan)other__;
            if(!state.Equals(o__.state))
            {
                return false;
            }
            if(matterNo == null)
            {
                if(o__.matterNo != null)
                {
                    return false;
                }
            }
            else
            {
                if(!matterNo.Equals(o__.matterNo))
                {
                    return false;
                }
            }
            if(PlanNO == null)
            {
                if(o__.PlanNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PlanNO.Equals(o__.PlanNO))
                {
                    return false;
                }
            }
            if(stcUnit == null)
            {
                if(o__.stcUnit != null)
                {
                    return false;
                }
            }
            else
            {
                if(!stcUnit.Equals(o__.stcUnit))
                {
                    return false;
                }
            }
            if(LayerNO == null)
            {
                if(o__.LayerNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!LayerNO.Equals(o__.LayerNO))
                {
                    return false;
                }
            }
            if(PlanTIME == null)
            {
                if(o__.PlanTIME != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PlanTIME.Equals(o__.PlanTIME))
                {
                    return false;
                }
            }
            if(ShipCNAME == null)
            {
                if(o__.ShipCNAME != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ShipCNAME.Equals(o__.ShipCNAME))
                {
                    return false;
                }
            }
            if(OutStoreID == null)
            {
                if(o__.OutStoreID != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OutStoreID.Equals(o__.OutStoreID))
                {
                    return false;
                }
            }
            if(InStoreID == null)
            {
                if(o__.InStoreID != null)
                {
                    return false;
                }
            }
            else
            {
                if(!InStoreID.Equals(o__.InStoreID))
                {
                    return false;
                }
            }
            if(MatType == null)
            {
                if(o__.MatType != null)
                {
                    return false;
                }
            }
            else
            {
                if(!MatType.Equals(o__.MatType))
                {
                    return false;
                }
            }
            if(ShipLotNUM == null)
            {
                if(o__.ShipLotNUM != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ShipLotNUM.Equals(o__.ShipLotNUM))
                {
                    return false;
                }
            }
            if(HAVEN == null)
            {
                if(o__.HAVEN != null)
                {
                    return false;
                }
            }
            else
            {
                if(!HAVEN.Equals(o__.HAVEN))
                {
                    return false;
                }
            }
            if(PIECE == null)
            {
                if(o__.PIECE != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PIECE.Equals(o__.PIECE))
                {
                    return false;
                }
            }
            if(GrossWEIGHT == null)
            {
                if(o__.GrossWEIGHT != null)
                {
                    return false;
                }
            }
            else
            {
                if(!GrossWEIGHT.Equals(o__.GrossWEIGHT))
                {
                    return false;
                }
            }
            if(NetWEIGHT == null)
            {
                if(o__.NetWEIGHT != null)
                {
                    return false;
                }
            }
            else
            {
                if(!NetWEIGHT.Equals(o__.NetWEIGHT))
                {
                    return false;
                }
            }
            if(TransTYPE == null)
            {
                if(o__.TransTYPE != null)
                {
                    return false;
                }
            }
            else
            {
                if(!TransTYPE.Equals(o__.TransTYPE))
                {
                    return false;
                }
            }
            if(FlagStraightFilling == null)
            {
                if(o__.FlagStraightFilling != null)
                {
                    return false;
                }
            }
            else
            {
                if(!FlagStraightFilling.Equals(o__.FlagStraightFilling))
                {
                    return false;
                }
            }
            if(PlanStatus == null)
            {
                if(o__.PlanStatus != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PlanStatus.Equals(o__.PlanStatus))
                {
                    return false;
                }
            }
            if(sqare1 == null)
            {
                if(o__.sqare1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare1.Equals(o__.sqare1))
                {
                    return false;
                }
            }
            if(sqare2 == null)
            {
                if(o__.sqare2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare2.Equals(o__.sqare2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(dtOutPlan lhs__, dtOutPlan rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(dtOutPlan lhs__, dtOutPlan rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeBool(state);
            os__.writeString(matterNo);
            os__.writeString(PlanNO);
            if(stcUnit == null)
            {
                PT.dtUnit tmp__ = new PT.dtUnit();
                tmp__.write__(os__);
            }
            else
            {
                stcUnit.write__(os__);
            }
            os__.writeString(LayerNO);
            os__.writeString(PlanTIME);
            os__.writeString(ShipCNAME);
            os__.writeString(OutStoreID);
            os__.writeString(InStoreID);
            os__.writeString(MatType);
            os__.writeString(ShipLotNUM);
            os__.writeString(HAVEN);
            os__.writeString(PIECE);
            os__.writeString(GrossWEIGHT);
            os__.writeString(NetWEIGHT);
            os__.writeString(TransTYPE);
            os__.writeString(FlagStraightFilling);
            os__.writeString(PlanStatus);
            os__.writeString(sqare1);
            os__.writeString(sqare2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            state = is__.readBool();
            matterNo = is__.readString();
            PlanNO = is__.readString();
            if(stcUnit == null)
            {
                stcUnit = new PT.dtUnit();
            }
            stcUnit.read__(is__);
            LayerNO = is__.readString();
            PlanTIME = is__.readString();
            ShipCNAME = is__.readString();
            OutStoreID = is__.readString();
            InStoreID = is__.readString();
            MatType = is__.readString();
            ShipLotNUM = is__.readString();
            HAVEN = is__.readString();
            PIECE = is__.readString();
            GrossWEIGHT = is__.readString();
            NetWEIGHT = is__.readString();
            TransTYPE = is__.readString();
            FlagStraightFilling = is__.readString();
            PlanStatus = is__.readString();
            sqare1 = is__.readString();
            sqare2 = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class dtOutPlanMAT : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PlanNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string MATNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string OutMATNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string LENGTH;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string WIDTH;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string THICK;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string InternalDIAMETER;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string ExternalDIAMETER;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string NetWEIGHT;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string GrossWEIGHT;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PT.dtUnit stcUnit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string LayerNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string RequireTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string PlanStatus;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string sqare2;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtOutPlanMAT()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public dtOutPlanMAT(string PlanNO, string MATNO, string OutMATNO, string LENGTH, string WIDTH, string THICK, string InternalDIAMETER, string ExternalDIAMETER, string NetWEIGHT, string GrossWEIGHT, PT.dtUnit stcUnit, string LayerNO, string RequireTime, string PlanStatus, string sqare1, string sqare2)
        {
            this.PlanNO = PlanNO;
            this.MATNO = MATNO;
            this.OutMATNO = OutMATNO;
            this.LENGTH = LENGTH;
            this.WIDTH = WIDTH;
            this.THICK = THICK;
            this.InternalDIAMETER = InternalDIAMETER;
            this.ExternalDIAMETER = ExternalDIAMETER;
            this.NetWEIGHT = NetWEIGHT;
            this.GrossWEIGHT = GrossWEIGHT;
            this.stcUnit = stcUnit;
            this.LayerNO = LayerNO;
            this.RequireTime = RequireTime;
            this.PlanStatus = PlanStatus;
            this.sqare1 = sqare1;
            this.sqare2 = sqare2;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::dtOutPlanMAT");
            IceInternal.HashUtil.hashAdd(ref h__, PlanNO);
            IceInternal.HashUtil.hashAdd(ref h__, MATNO);
            IceInternal.HashUtil.hashAdd(ref h__, OutMATNO);
            IceInternal.HashUtil.hashAdd(ref h__, LENGTH);
            IceInternal.HashUtil.hashAdd(ref h__, WIDTH);
            IceInternal.HashUtil.hashAdd(ref h__, THICK);
            IceInternal.HashUtil.hashAdd(ref h__, InternalDIAMETER);
            IceInternal.HashUtil.hashAdd(ref h__, ExternalDIAMETER);
            IceInternal.HashUtil.hashAdd(ref h__, NetWEIGHT);
            IceInternal.HashUtil.hashAdd(ref h__, GrossWEIGHT);
            IceInternal.HashUtil.hashAdd(ref h__, stcUnit);
            IceInternal.HashUtil.hashAdd(ref h__, LayerNO);
            IceInternal.HashUtil.hashAdd(ref h__, RequireTime);
            IceInternal.HashUtil.hashAdd(ref h__, PlanStatus);
            IceInternal.HashUtil.hashAdd(ref h__, sqare1);
            IceInternal.HashUtil.hashAdd(ref h__, sqare2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            dtOutPlanMAT o__ = (dtOutPlanMAT)other__;
            if(PlanNO == null)
            {
                if(o__.PlanNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PlanNO.Equals(o__.PlanNO))
                {
                    return false;
                }
            }
            if(MATNO == null)
            {
                if(o__.MATNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!MATNO.Equals(o__.MATNO))
                {
                    return false;
                }
            }
            if(OutMATNO == null)
            {
                if(o__.OutMATNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!OutMATNO.Equals(o__.OutMATNO))
                {
                    return false;
                }
            }
            if(LENGTH == null)
            {
                if(o__.LENGTH != null)
                {
                    return false;
                }
            }
            else
            {
                if(!LENGTH.Equals(o__.LENGTH))
                {
                    return false;
                }
            }
            if(WIDTH == null)
            {
                if(o__.WIDTH != null)
                {
                    return false;
                }
            }
            else
            {
                if(!WIDTH.Equals(o__.WIDTH))
                {
                    return false;
                }
            }
            if(THICK == null)
            {
                if(o__.THICK != null)
                {
                    return false;
                }
            }
            else
            {
                if(!THICK.Equals(o__.THICK))
                {
                    return false;
                }
            }
            if(InternalDIAMETER == null)
            {
                if(o__.InternalDIAMETER != null)
                {
                    return false;
                }
            }
            else
            {
                if(!InternalDIAMETER.Equals(o__.InternalDIAMETER))
                {
                    return false;
                }
            }
            if(ExternalDIAMETER == null)
            {
                if(o__.ExternalDIAMETER != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ExternalDIAMETER.Equals(o__.ExternalDIAMETER))
                {
                    return false;
                }
            }
            if(NetWEIGHT == null)
            {
                if(o__.NetWEIGHT != null)
                {
                    return false;
                }
            }
            else
            {
                if(!NetWEIGHT.Equals(o__.NetWEIGHT))
                {
                    return false;
                }
            }
            if(GrossWEIGHT == null)
            {
                if(o__.GrossWEIGHT != null)
                {
                    return false;
                }
            }
            else
            {
                if(!GrossWEIGHT.Equals(o__.GrossWEIGHT))
                {
                    return false;
                }
            }
            if(stcUnit == null)
            {
                if(o__.stcUnit != null)
                {
                    return false;
                }
            }
            else
            {
                if(!stcUnit.Equals(o__.stcUnit))
                {
                    return false;
                }
            }
            if(LayerNO == null)
            {
                if(o__.LayerNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!LayerNO.Equals(o__.LayerNO))
                {
                    return false;
                }
            }
            if(RequireTime == null)
            {
                if(o__.RequireTime != null)
                {
                    return false;
                }
            }
            else
            {
                if(!RequireTime.Equals(o__.RequireTime))
                {
                    return false;
                }
            }
            if(PlanStatus == null)
            {
                if(o__.PlanStatus != null)
                {
                    return false;
                }
            }
            else
            {
                if(!PlanStatus.Equals(o__.PlanStatus))
                {
                    return false;
                }
            }
            if(sqare1 == null)
            {
                if(o__.sqare1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare1.Equals(o__.sqare1))
                {
                    return false;
                }
            }
            if(sqare2 == null)
            {
                if(o__.sqare2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!sqare2.Equals(o__.sqare2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(dtOutPlanMAT lhs__, dtOutPlanMAT rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(dtOutPlanMAT lhs__, dtOutPlanMAT rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(PlanNO);
            os__.writeString(MATNO);
            os__.writeString(OutMATNO);
            os__.writeString(LENGTH);
            os__.writeString(WIDTH);
            os__.writeString(THICK);
            os__.writeString(InternalDIAMETER);
            os__.writeString(ExternalDIAMETER);
            os__.writeString(NetWEIGHT);
            os__.writeString(GrossWEIGHT);
            if(stcUnit == null)
            {
                PT.dtUnit tmp__ = new PT.dtUnit();
                tmp__.write__(os__);
            }
            else
            {
                stcUnit.write__(os__);
            }
            os__.writeString(LayerNO);
            os__.writeString(RequireTime);
            os__.writeString(PlanStatus);
            os__.writeString(sqare1);
            os__.writeString(sqare2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            PlanNO = is__.readString();
            MATNO = is__.readString();
            OutMATNO = is__.readString();
            LENGTH = is__.readString();
            WIDTH = is__.readString();
            THICK = is__.readString();
            InternalDIAMETER = is__.readString();
            ExternalDIAMETER = is__.readString();
            NetWEIGHT = is__.readString();
            GrossWEIGHT = is__.readString();
            if(stcUnit == null)
            {
                stcUnit = new PT.dtUnit();
            }
            stcUnit.read__(is__);
            LayerNO = is__.readString();
            RequireTime = is__.readString();
            PlanStatus = is__.readString();
            sqare1 = is__.readString();
            sqare2 = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class inventoryStock : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string select;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string unitno;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string MATNO;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string MATNOFIRST;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public inventoryStock()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public inventoryStock(string select, string unitno, string MATNO, string MATNOFIRST)
        {
            this.select = select;
            this.unitno = unitno;
            this.MATNO = MATNO;
            this.MATNOFIRST = MATNOFIRST;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::PT::inventoryStock");
            IceInternal.HashUtil.hashAdd(ref h__, select);
            IceInternal.HashUtil.hashAdd(ref h__, unitno);
            IceInternal.HashUtil.hashAdd(ref h__, MATNO);
            IceInternal.HashUtil.hashAdd(ref h__, MATNOFIRST);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            inventoryStock o__ = (inventoryStock)other__;
            if(select == null)
            {
                if(o__.select != null)
                {
                    return false;
                }
            }
            else
            {
                if(!select.Equals(o__.select))
                {
                    return false;
                }
            }
            if(unitno == null)
            {
                if(o__.unitno != null)
                {
                    return false;
                }
            }
            else
            {
                if(!unitno.Equals(o__.unitno))
                {
                    return false;
                }
            }
            if(MATNO == null)
            {
                if(o__.MATNO != null)
                {
                    return false;
                }
            }
            else
            {
                if(!MATNO.Equals(o__.MATNO))
                {
                    return false;
                }
            }
            if(MATNOFIRST == null)
            {
                if(o__.MATNOFIRST != null)
                {
                    return false;
                }
            }
            else
            {
                if(!MATNOFIRST.Equals(o__.MATNOFIRST))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(inventoryStock lhs__, inventoryStock rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(inventoryStock lhs__, inventoryStock rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(select);
            os__.writeString(unitno);
            os__.writeString(MATNO);
            os__.writeString(MATNOFIRST);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            select = is__.readString();
            unitno = is__.readString();
            MATNO = is__.readString();
            MATNOFIRST = is__.readString();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PTInterface : Ice.Object, PTInterfaceOperations_, PTInterfaceOperationsNC_
    {
    }
}

namespace PT
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_getSecTicksSinceUTC1970(long ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_UsrLoginCheck(int ret__, string cID, int nRet, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_TruckPos(int ret__, PT.TruckCls Turck, string cID, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_TruckInInf(int ret__, string cID, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_SearchMatInf(int ret__, PT.MatterCls[] matlist, string cID, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_DeleteWrongMat(int ret__, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_SubmitTruckInf(int ret__, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_TruckInOutAck(int ret__, int nResult, PT.MatterCls[] matlist);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_PreSend2L3(int ret__, string cID, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_CheckPreSend(int ret__, string cRetMessage, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_MatInfSearch(int ret__, PT.MatterCls mat, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_MatInfQuery(int ret__, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_StockInfSearch(int ret__, PT.MatterCls[] mat, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_StockInfSumbit(int ret__, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_StockDiffSearch(int ret__, PT.MatterCls[] mat, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_OutSearch(int ret__, PT.dtOutPlan[] matlist, int nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_OutInventoryInfo(int ret__, string id, string area);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_RecheckLIST(int ret__, string id, PT.inventoryStock[] LIST);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_MatInOut(int ret__, string nResult);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PTInterface_MatInOutAckSearch(int ret__, string nResult);
}

namespace PT
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PTInterfacePrx : Ice.ObjectPrx
    {
        long getSecTicksSinceUTC1970();
        long getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_getSecTicksSinceUTC1970> begin_getSecTicksSinceUTC1970();
        Ice.AsyncResult<PT.Callback_PTInterface_getSecTicksSinceUTC1970> begin_getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getSecTicksSinceUTC1970(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        long end_getSecTicksSinceUTC1970(Ice.AsyncResult r__);

        int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult);
        int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_UsrLoginCheck> begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword);
        Ice.AsyncResult<PT.Callback_PTInterface_UsrLoginCheck> begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_UsrLoginCheck(out string cID, out int nRet, out int nResult, Ice.AsyncResult r__);

        int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult);
        int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_TruckPos> begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck);
        Ice.AsyncResult<PT.Callback_PTInterface_TruckPos> begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_TruckPos(out PT.TruckCls Turck, out string cID, out int nResult, Ice.AsyncResult r__);

        int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult);
        int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_TruckInInf> begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo);
        Ice.AsyncResult<PT.Callback_PTInterface_TruckInInf> begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_TruckInInf(out string cID, out int nResult, Ice.AsyncResult r__);

        int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult);
        int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_SearchMatInf> begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo);
        Ice.AsyncResult<PT.Callback_PTInterface_SearchMatInf> begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_SearchMatInf(out PT.MatterCls[] matlist, out string cID, out int nResult, Ice.AsyncResult r__);

        int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult);
        int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_DeleteWrongMat> begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo);
        Ice.AsyncResult<PT.Callback_PTInterface_DeleteWrongMat> begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_DeleteWrongMat(out int nResult, Ice.AsyncResult r__);

        int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult);
        int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_SubmitTruckInf> begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist);
        Ice.AsyncResult<PT.Callback_PTInterface_SubmitTruckInf> begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_SubmitTruckInf(out int nResult, Ice.AsyncResult r__);

        int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist);
        int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_TruckInOutAck> begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo);
        Ice.AsyncResult<PT.Callback_PTInterface_TruckInOutAck> begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_TruckInOutAck(out int nResult, out PT.MatterCls[] matlist, Ice.AsyncResult r__);

        int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult);
        int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_PreSend2L3> begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend);
        Ice.AsyncResult<PT.Callback_PTInterface_PreSend2L3> begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_PreSend2L3(out string cID, out int nResult, Ice.AsyncResult r__);

        int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult);
        int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_CheckPreSend> begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT);
        Ice.AsyncResult<PT.Callback_PTInterface_CheckPreSend> begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_CheckPreSend(out string cRetMessage, out int nResult, Ice.AsyncResult r__);

        int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult);
        int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_MatInfSearch> begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT);
        Ice.AsyncResult<PT.Callback_PTInterface_MatInfSearch> begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_MatInfSearch(out PT.MatterCls mat, out int nResult, Ice.AsyncResult r__);

        int MatInfQuery(string cMAT, out int nResult);
        int MatInfQuery(string cMAT, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_MatInfQuery> begin_MatInfQuery(string cMAT);
        Ice.AsyncResult<PT.Callback_PTInterface_MatInfQuery> begin_MatInfQuery(string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_MatInfQuery(string cMAT, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_MatInfQuery(string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_MatInfQuery(out int nResult, Ice.AsyncResult r__);

        int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult);
        int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_StockInfSearch> begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo);
        Ice.AsyncResult<PT.Callback_PTInterface_StockInfSearch> begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_StockInfSearch(out PT.MatterCls[] mat, out int nResult, Ice.AsyncResult r__);

        int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult);
        int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_StockInfSumbit> begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat);
        Ice.AsyncResult<PT.Callback_PTInterface_StockInfSumbit> begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_StockInfSumbit(out int nResult, Ice.AsyncResult r__);

        int StockDiffSearch(out PT.MatterCls[] mat, out int nResult);
        int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_StockDiffSearch> begin_StockDiffSearch();
        Ice.AsyncResult<PT.Callback_PTInterface_StockDiffSearch> begin_StockDiffSearch(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_StockDiffSearch(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_StockDiffSearch(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_StockDiffSearch(out PT.MatterCls[] mat, out int nResult, Ice.AsyncResult r__);

        int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult);
        int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_OutSearch> begin_OutSearch(string type);
        Ice.AsyncResult<PT.Callback_PTInterface_OutSearch> begin_OutSearch(string type, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_OutSearch(string type, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_OutSearch(string type, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_OutSearch(out PT.dtOutPlan[] matlist, out int nResult, Ice.AsyncResult r__);

        int OutInventoryInfo(string bayno, out string id, out string area);
        int OutInventoryInfo(string bayno, out string id, out string area, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_OutInventoryInfo> begin_OutInventoryInfo(string bayno);
        Ice.AsyncResult<PT.Callback_PTInterface_OutInventoryInfo> begin_OutInventoryInfo(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_OutInventoryInfo(string bayno, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_OutInventoryInfo(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_OutInventoryInfo(out string id, out string area, Ice.AsyncResult r__);

        int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST);
        int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_RecheckLIST> begin_RecheckLIST(string bayno);
        Ice.AsyncResult<PT.Callback_PTInterface_RecheckLIST> begin_RecheckLIST(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_RecheckLIST(string bayno, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_RecheckLIST(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_RecheckLIST(out string id, out PT.inventoryStock[] LIST, Ice.AsyncResult r__);

        int MatInOut(string type, string tagValue, out string nResult);
        int MatInOut(string type, string tagValue, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_MatInOut> begin_MatInOut(string type, string tagValue);
        Ice.AsyncResult<PT.Callback_PTInterface_MatInOut> begin_MatInOut(string type, string tagValue, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_MatInOut(string type, string tagValue, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_MatInOut(string type, string tagValue, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_MatInOut(out string nResult, Ice.AsyncResult r__);

        int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult);
        int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PT.Callback_PTInterface_MatInOutAckSearch> begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type);
        Ice.AsyncResult<PT.Callback_PTInterface_MatInOutAckSearch> begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_MatInOutAckSearch(out string nResult, Ice.AsyncResult r__);
    }
}

namespace PT
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PTInterfaceOperations_
    {
        long getSecTicksSinceUTC1970(Ice.Current current__);

        int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, Ice.Current current__);

        int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, Ice.Current current__);

        int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, Ice.Current current__);

        int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, Ice.Current current__);

        int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, Ice.Current current__);

        int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, Ice.Current current__);

        int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, Ice.Current current__);

        int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, Ice.Current current__);

        int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, Ice.Current current__);

        int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, Ice.Current current__);

        int MatInfQuery(string cMAT, out int nResult, Ice.Current current__);

        int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, Ice.Current current__);

        int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, Ice.Current current__);

        int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, Ice.Current current__);

        int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, Ice.Current current__);

        int OutInventoryInfo(string bayno, out string id, out string area, Ice.Current current__);

        int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, Ice.Current current__);

        int MatInOut(string type, string tagValue, out string nResult, Ice.Current current__);

        int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PTInterfaceOperationsNC_
    {
        long getSecTicksSinceUTC1970();

        int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult);

        int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult);

        int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult);

        int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult);

        int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult);

        int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult);

        int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist);

        int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult);

        int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult);

        int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult);

        int MatInfQuery(string cMAT, out int nResult);

        int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult);

        int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult);

        int StockDiffSearch(out PT.MatterCls[] mat, out int nResult);

        int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult);

        int OutInventoryInfo(string bayno, out string id, out string area);

        int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST);

        int MatInOut(string type, string tagValue, out string nResult);

        int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult);
    }
}

namespace PT
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class MatterClsSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, PT.MatterCls[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PT.MatterCls() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PT.MatterCls[] read(IceInternal.BasicStream is__)
        {
            PT.MatterCls[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(80);
                v__ = new PT.MatterCls[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PT.MatterCls();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class LstOutPlanHelper
    {
        public static void write(IceInternal.BasicStream os__, PT.dtOutPlan[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PT.dtOutPlan() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PT.dtOutPlan[] read(IceInternal.BasicStream is__)
        {
            PT.dtOutPlan[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(29);
                v__ = new PT.dtOutPlan[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PT.dtOutPlan();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class LstOutPlanMATHelper
    {
        public static void write(IceInternal.BasicStream os__, PT.dtOutPlanMAT[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PT.dtOutPlanMAT() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PT.dtOutPlanMAT[] read(IceInternal.BasicStream is__)
        {
            PT.dtOutPlanMAT[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(25);
                v__ = new PT.dtOutPlanMAT[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PT.dtOutPlanMAT();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class LstMATsHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class LstInventoryStocksHelper
    {
        public static void write(IceInternal.BasicStream os__, PT.inventoryStock[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new PT.inventoryStock() : v__[ix__]).write__(os__);
                }
            }
        }

        public static PT.inventoryStock[] read(IceInternal.BasicStream is__)
        {
            PT.inventoryStock[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                v__ = new PT.inventoryStock[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new PT.inventoryStock();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class PTInterfacePrxHelper : Ice.ObjectPrxHelperBase, PTInterfacePrx
    {
        #region Synchronous operations

        public int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult)
        {
            return CheckPreSend(stcPTCommon, cMAT, out cRetMessage, out nResult, null, false);
        }

        public int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return CheckPreSend(stcPTCommon, cMAT, out cRetMessage, out nResult, context__, true);
        }

        private int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __CheckPreSend_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__CheckPreSend_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.CheckPreSend(stcPTCommon, cMAT, out cRetMessage, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult)
        {
            return DeleteWrongMat(CarInf, MATNO, ProcessNo, out nResult, null, false);
        }

        public int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return DeleteWrongMat(CarInf, MATNO, ProcessNo, out nResult, context__, true);
        }

        private int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __DeleteWrongMat_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__DeleteWrongMat_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.DeleteWrongMat(CarInf, MATNO, ProcessNo, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int MatInOut(string type, string tagValue, out string nResult)
        {
            return MatInOut(type, tagValue, out nResult, null, false);
        }

        public int MatInOut(string type, string tagValue, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return MatInOut(type, tagValue, out nResult, context__, true);
        }

        private int MatInOut(string type, string tagValue, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __MatInOut_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__MatInOut_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.MatInOut(type, tagValue, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult)
        {
            return MatInOutAckSearch(stcPTCommon, matno, type, out nResult, null, false);
        }

        public int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return MatInOutAckSearch(stcPTCommon, matno, type, out nResult, context__, true);
        }

        private int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __MatInOutAckSearch_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__MatInOutAckSearch_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.MatInOutAckSearch(stcPTCommon, matno, type, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int MatInfQuery(string cMAT, out int nResult)
        {
            return MatInfQuery(cMAT, out nResult, null, false);
        }

        public int MatInfQuery(string cMAT, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return MatInfQuery(cMAT, out nResult, context__, true);
        }

        private int MatInfQuery(string cMAT, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __MatInfQuery_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__MatInfQuery_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.MatInfQuery(cMAT, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult)
        {
            return MatInfSearch(stcPTCommon, cMAT, out mat, out nResult, null, false);
        }

        public int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return MatInfSearch(stcPTCommon, cMAT, out mat, out nResult, context__, true);
        }

        private int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __MatInfSearch_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__MatInfSearch_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.MatInfSearch(stcPTCommon, cMAT, out mat, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int OutInventoryInfo(string bayno, out string id, out string area)
        {
            return OutInventoryInfo(bayno, out id, out area, null, false);
        }

        public int OutInventoryInfo(string bayno, out string id, out string area, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return OutInventoryInfo(bayno, out id, out area, context__, true);
        }

        private int OutInventoryInfo(string bayno, out string id, out string area, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __OutInventoryInfo_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__OutInventoryInfo_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.OutInventoryInfo(bayno, out id, out area, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult)
        {
            return OutSearch(type, out matlist, out nResult, null, false);
        }

        public int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return OutSearch(type, out matlist, out nResult, context__, true);
        }

        private int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __OutSearch_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__OutSearch_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.OutSearch(type, out matlist, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult)
        {
            return PreSend2L3(stcPTCommon, cMAT, MT, cPresend, out cID, out nResult, null, false);
        }

        public int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return PreSend2L3(stcPTCommon, cMAT, MT, cPresend, out cID, out nResult, context__, true);
        }

        private int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __PreSend2L3_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__PreSend2L3_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.PreSend2L3(stcPTCommon, cMAT, MT, cPresend, out cID, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST)
        {
            return RecheckLIST(bayno, out id, out LIST, null, false);
        }

        public int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return RecheckLIST(bayno, out id, out LIST, context__, true);
        }

        private int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __RecheckLIST_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__RecheckLIST_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.RecheckLIST(bayno, out id, out LIST, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult)
        {
            return SearchMatInf(stcPTCommon, CarInf, ProcessNo, out matlist, out cID, out nResult, null, false);
        }

        public int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return SearchMatInf(stcPTCommon, CarInf, ProcessNo, out matlist, out cID, out nResult, context__, true);
        }

        private int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __SearchMatInf_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__SearchMatInf_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.SearchMatInf(stcPTCommon, CarInf, ProcessNo, out matlist, out cID, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int StockDiffSearch(out PT.MatterCls[] mat, out int nResult)
        {
            return StockDiffSearch(out mat, out nResult, null, false);
        }

        public int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return StockDiffSearch(out mat, out nResult, context__, true);
        }

        private int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __StockDiffSearch_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__StockDiffSearch_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.StockDiffSearch(out mat, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult)
        {
            return StockInfSearch(stcPTCommon, ColNo, out mat, out nResult, null, false);
        }

        public int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return StockInfSearch(stcPTCommon, ColNo, out mat, out nResult, context__, true);
        }

        private int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __StockInfSearch_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__StockInfSearch_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.StockInfSearch(stcPTCommon, ColNo, out mat, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult)
        {
            return StockInfSumbit(type, stcPTCommon, mat, out nResult, null, false);
        }

        public int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return StockInfSumbit(type, stcPTCommon, mat, out nResult, context__, true);
        }

        private int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __StockInfSumbit_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__StockInfSumbit_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.StockInfSumbit(type, stcPTCommon, mat, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult)
        {
            return SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, out nResult, null, false);
        }

        public int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, out nResult, context__, true);
        }

        private int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __SubmitTruckInf_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__SubmitTruckInf_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult)
        {
            return TruckInInf(stcPTCommon, CarInf, ProcessNo, out cID, out nResult, null, false);
        }

        public int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return TruckInInf(stcPTCommon, CarInf, ProcessNo, out cID, out nResult, context__, true);
        }

        private int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __TruckInInf_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__TruckInInf_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.TruckInInf(stcPTCommon, CarInf, ProcessNo, out cID, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist)
        {
            return TruckInOutAck(stcPTCommon, ProcessNo, out nResult, out matlist, null, false);
        }

        public int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return TruckInOutAck(stcPTCommon, ProcessNo, out nResult, out matlist, context__, true);
        }

        private int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __TruckInOutAck_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__TruckInOutAck_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.TruckInOutAck(stcPTCommon, ProcessNo, out nResult, out matlist, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult)
        {
            return TruckPos(stcPTCommon, truck, out Turck, out cID, out nResult, null, false);
        }

        public int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return TruckPos(stcPTCommon, truck, out Turck, out cID, out nResult, context__, true);
        }

        private int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __TruckPos_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__TruckPos_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.TruckPos(stcPTCommon, truck, out Turck, out cID, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult)
        {
            return UsrLoginCheck(stcPTCommon, cPassword, out cID, out nRet, out nResult, null, false);
        }

        public int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return UsrLoginCheck(stcPTCommon, cPassword, out cID, out nRet, out nResult, context__, true);
        }

        private int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __UsrLoginCheck_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__UsrLoginCheck_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.UsrLoginCheck(stcPTCommon, cPassword, out cID, out nRet, out nResult, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public long getSecTicksSinceUTC1970()
        {
            return getSecTicksSinceUTC1970(null, false);
        }

        public long getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getSecTicksSinceUTC1970(context__, true);
        }

        private long getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getSecTicksSinceUTC1970_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__getSecTicksSinceUTC1970_name);
                        delBase__ = getDelegate__(false);
                        PTInterfaceDel_ del__ = (PTInterfaceDel_)delBase__;
                        return del__.getSecTicksSinceUTC1970(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<PT.Callback_PTInterface_CheckPreSend> begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT)
        {
            return begin_CheckPreSend(stcPTCommon, cMAT, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_CheckPreSend> begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_CheckPreSend(stcPTCommon, cMAT, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_CheckPreSend(stcPTCommon, cMAT, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_CheckPreSend(stcPTCommon, cMAT, ctx__, true, cb__, cookie__);
        }

        private const string __CheckPreSend_name = "CheckPreSend";

        public int end_CheckPreSend(out string cRetMessage, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __CheckPreSend_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                cRetMessage = is__.readString();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_CheckPreSend> begin_CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__CheckPreSend_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_CheckPreSend> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_CheckPreSend>(this, __CheckPreSend_name, CheckPreSend_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__CheckPreSend_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeString(cMAT);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void CheckPreSend_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_CheckPreSend cb__, Ice.ExceptionCallback excb__)
        {
            string cRetMessage;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_CheckPreSend(out cRetMessage, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, cRetMessage, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_DeleteWrongMat> begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo)
        {
            return begin_DeleteWrongMat(CarInf, MATNO, ProcessNo, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_DeleteWrongMat> begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_DeleteWrongMat(CarInf, MATNO, ProcessNo, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_DeleteWrongMat(CarInf, MATNO, ProcessNo, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_DeleteWrongMat(CarInf, MATNO, ProcessNo, ctx__, true, cb__, cookie__);
        }

        private const string __DeleteWrongMat_name = "DeleteWrongMat";

        public int end_DeleteWrongMat(out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __DeleteWrongMat_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_DeleteWrongMat> begin_DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__DeleteWrongMat_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_DeleteWrongMat> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_DeleteWrongMat>(this, __DeleteWrongMat_name, DeleteWrongMat_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__DeleteWrongMat_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(CarInf == null)
                {
                    PT.TruckCls tmp__ = new PT.TruckCls();
                    tmp__.write__(os__);
                }
                else
                {
                    CarInf.write__(os__);
                }
                os__.writeString(MATNO);
                os__.writeInt(ProcessNo);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void DeleteWrongMat_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_DeleteWrongMat cb__, Ice.ExceptionCallback excb__)
        {
            int nResult;
            int ret__;
            try
            {
                ret__ = end_DeleteWrongMat(out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInOut> begin_MatInOut(string type, string tagValue)
        {
            return begin_MatInOut(type, tagValue, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInOut> begin_MatInOut(string type, string tagValue, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_MatInOut(type, tagValue, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_MatInOut(string type, string tagValue, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInOut(type, tagValue, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_MatInOut(string type, string tagValue, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInOut(type, tagValue, ctx__, true, cb__, cookie__);
        }

        private const string __MatInOut_name = "MatInOut";

        public int end_MatInOut(out string nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __MatInOut_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readString();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_MatInOut> begin_MatInOut(string type, string tagValue, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__MatInOut_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInOut> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInOut>(this, __MatInOut_name, MatInOut_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__MatInOut_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(type);
                os__.writeString(tagValue);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void MatInOut_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_MatInOut cb__, Ice.ExceptionCallback excb__)
        {
            string nResult;
            int ret__;
            try
            {
                ret__ = end_MatInOut(out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInOutAckSearch> begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type)
        {
            return begin_MatInOutAckSearch(stcPTCommon, matno, type, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInOutAckSearch> begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_MatInOutAckSearch(stcPTCommon, matno, type, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInOutAckSearch(stcPTCommon, matno, type, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInOutAckSearch(stcPTCommon, matno, type, ctx__, true, cb__, cookie__);
        }

        private const string __MatInOutAckSearch_name = "MatInOutAckSearch";

        public int end_MatInOutAckSearch(out string nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __MatInOutAckSearch_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readString();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_MatInOutAckSearch> begin_MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__MatInOutAckSearch_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInOutAckSearch> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInOutAckSearch>(this, __MatInOutAckSearch_name, MatInOutAckSearch_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__MatInOutAckSearch_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeString(matno);
                os__.writeString(type);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void MatInOutAckSearch_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_MatInOutAckSearch cb__, Ice.ExceptionCallback excb__)
        {
            string nResult;
            int ret__;
            try
            {
                ret__ = end_MatInOutAckSearch(out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInfQuery> begin_MatInfQuery(string cMAT)
        {
            return begin_MatInfQuery(cMAT, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInfQuery> begin_MatInfQuery(string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_MatInfQuery(cMAT, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_MatInfQuery(string cMAT, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInfQuery(cMAT, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_MatInfQuery(string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInfQuery(cMAT, ctx__, true, cb__, cookie__);
        }

        private const string __MatInfQuery_name = "MatInfQuery";

        public int end_MatInfQuery(out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __MatInfQuery_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_MatInfQuery> begin_MatInfQuery(string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__MatInfQuery_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInfQuery> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInfQuery>(this, __MatInfQuery_name, MatInfQuery_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__MatInfQuery_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(cMAT);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void MatInfQuery_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_MatInfQuery cb__, Ice.ExceptionCallback excb__)
        {
            int nResult;
            int ret__;
            try
            {
                ret__ = end_MatInfQuery(out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInfSearch> begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT)
        {
            return begin_MatInfSearch(stcPTCommon, cMAT, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_MatInfSearch> begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_MatInfSearch(stcPTCommon, cMAT, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInfSearch(stcPTCommon, cMAT, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_MatInfSearch(stcPTCommon, cMAT, ctx__, true, cb__, cookie__);
        }

        private const string __MatInfSearch_name = "MatInfSearch";

        public int end_MatInfSearch(out PT.MatterCls mat, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __MatInfSearch_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                mat = null;
                if(mat == null)
                {
                    mat = new PT.MatterCls();
                }
                mat.read__(is__);
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_MatInfSearch> begin_MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__MatInfSearch_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInfSearch> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_MatInfSearch>(this, __MatInfSearch_name, MatInfSearch_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__MatInfSearch_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeString(cMAT);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void MatInfSearch_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_MatInfSearch cb__, Ice.ExceptionCallback excb__)
        {
            PT.MatterCls mat;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_MatInfSearch(out mat, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, mat, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_OutInventoryInfo> begin_OutInventoryInfo(string bayno)
        {
            return begin_OutInventoryInfo(bayno, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_OutInventoryInfo> begin_OutInventoryInfo(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_OutInventoryInfo(bayno, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_OutInventoryInfo(string bayno, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_OutInventoryInfo(bayno, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_OutInventoryInfo(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_OutInventoryInfo(bayno, ctx__, true, cb__, cookie__);
        }

        private const string __OutInventoryInfo_name = "OutInventoryInfo";

        public int end_OutInventoryInfo(out string id, out string area, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __OutInventoryInfo_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                id = is__.readString();
                area = is__.readString();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_OutInventoryInfo> begin_OutInventoryInfo(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__OutInventoryInfo_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_OutInventoryInfo> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_OutInventoryInfo>(this, __OutInventoryInfo_name, OutInventoryInfo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__OutInventoryInfo_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(bayno);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void OutInventoryInfo_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_OutInventoryInfo cb__, Ice.ExceptionCallback excb__)
        {
            string id;
            string area;
            int ret__;
            try
            {
                ret__ = end_OutInventoryInfo(out id, out area, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, id, area);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_OutSearch> begin_OutSearch(string type)
        {
            return begin_OutSearch(type, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_OutSearch> begin_OutSearch(string type, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_OutSearch(type, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_OutSearch(string type, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_OutSearch(type, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_OutSearch(string type, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_OutSearch(type, ctx__, true, cb__, cookie__);
        }

        private const string __OutSearch_name = "OutSearch";

        public int end_OutSearch(out PT.dtOutPlan[] matlist, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __OutSearch_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                matlist = PT.LstOutPlanHelper.read(is__);
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_OutSearch> begin_OutSearch(string type, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__OutSearch_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_OutSearch> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_OutSearch>(this, __OutSearch_name, OutSearch_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__OutSearch_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(type);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void OutSearch_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_OutSearch cb__, Ice.ExceptionCallback excb__)
        {
            PT.dtOutPlan[] matlist;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_OutSearch(out matlist, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, matlist, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_PreSend2L3> begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend)
        {
            return begin_PreSend2L3(stcPTCommon, cMAT, MT, cPresend, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_PreSend2L3> begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_PreSend2L3(stcPTCommon, cMAT, MT, cPresend, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_PreSend2L3(stcPTCommon, cMAT, MT, cPresend, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_PreSend2L3(stcPTCommon, cMAT, MT, cPresend, ctx__, true, cb__, cookie__);
        }

        private const string __PreSend2L3_name = "PreSend2L3";

        public int end_PreSend2L3(out string cID, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __PreSend2L3_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                cID = is__.readString();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_PreSend2L3> begin_PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__PreSend2L3_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_PreSend2L3> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_PreSend2L3>(this, __PreSend2L3_name, PreSend2L3_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__PreSend2L3_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeString(cMAT);
                os__.writeString(MT);
                os__.writeString(cPresend);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void PreSend2L3_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_PreSend2L3 cb__, Ice.ExceptionCallback excb__)
        {
            string cID;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_PreSend2L3(out cID, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, cID, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_RecheckLIST> begin_RecheckLIST(string bayno)
        {
            return begin_RecheckLIST(bayno, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_RecheckLIST> begin_RecheckLIST(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_RecheckLIST(bayno, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_RecheckLIST(string bayno, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_RecheckLIST(bayno, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_RecheckLIST(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_RecheckLIST(bayno, ctx__, true, cb__, cookie__);
        }

        private const string __RecheckLIST_name = "RecheckLIST";

        public int end_RecheckLIST(out string id, out PT.inventoryStock[] LIST, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __RecheckLIST_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                id = is__.readString();
                LIST = PT.LstInventoryStocksHelper.read(is__);
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_RecheckLIST> begin_RecheckLIST(string bayno, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__RecheckLIST_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_RecheckLIST> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_RecheckLIST>(this, __RecheckLIST_name, RecheckLIST_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__RecheckLIST_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(bayno);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void RecheckLIST_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_RecheckLIST cb__, Ice.ExceptionCallback excb__)
        {
            string id;
            PT.inventoryStock[] LIST;
            int ret__;
            try
            {
                ret__ = end_RecheckLIST(out id, out LIST, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, id, LIST);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_SearchMatInf> begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo)
        {
            return begin_SearchMatInf(stcPTCommon, CarInf, ProcessNo, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_SearchMatInf> begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SearchMatInf(stcPTCommon, CarInf, ProcessNo, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SearchMatInf(stcPTCommon, CarInf, ProcessNo, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SearchMatInf(stcPTCommon, CarInf, ProcessNo, ctx__, true, cb__, cookie__);
        }

        private const string __SearchMatInf_name = "SearchMatInf";

        public int end_SearchMatInf(out PT.MatterCls[] matlist, out string cID, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __SearchMatInf_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                matlist = PT.MatterClsSeqHelper.read(is__);
                cID = is__.readString();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_SearchMatInf> begin_SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SearchMatInf_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_SearchMatInf> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_SearchMatInf>(this, __SearchMatInf_name, SearchMatInf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SearchMatInf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                if(CarInf == null)
                {
                    PT.TruckCls tmp__ = new PT.TruckCls();
                    tmp__.write__(os__);
                }
                else
                {
                    CarInf.write__(os__);
                }
                os__.writeInt(ProcessNo);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SearchMatInf_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_SearchMatInf cb__, Ice.ExceptionCallback excb__)
        {
            PT.MatterCls[] matlist;
            string cID;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_SearchMatInf(out matlist, out cID, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, matlist, cID, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_StockDiffSearch> begin_StockDiffSearch()
        {
            return begin_StockDiffSearch(null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_StockDiffSearch> begin_StockDiffSearch(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_StockDiffSearch(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_StockDiffSearch(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_StockDiffSearch(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_StockDiffSearch(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_StockDiffSearch(ctx__, true, cb__, cookie__);
        }

        private const string __StockDiffSearch_name = "StockDiffSearch";

        public int end_StockDiffSearch(out PT.MatterCls[] mat, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __StockDiffSearch_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                mat = PT.MatterClsSeqHelper.read(is__);
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_StockDiffSearch> begin_StockDiffSearch(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__StockDiffSearch_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_StockDiffSearch> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_StockDiffSearch>(this, __StockDiffSearch_name, StockDiffSearch_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__StockDiffSearch_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void StockDiffSearch_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_StockDiffSearch cb__, Ice.ExceptionCallback excb__)
        {
            PT.MatterCls[] mat;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_StockDiffSearch(out mat, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, mat, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_StockInfSearch> begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo)
        {
            return begin_StockInfSearch(stcPTCommon, ColNo, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_StockInfSearch> begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_StockInfSearch(stcPTCommon, ColNo, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_StockInfSearch(stcPTCommon, ColNo, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_StockInfSearch(stcPTCommon, ColNo, ctx__, true, cb__, cookie__);
        }

        private const string __StockInfSearch_name = "StockInfSearch";

        public int end_StockInfSearch(out PT.MatterCls[] mat, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __StockInfSearch_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                mat = PT.MatterClsSeqHelper.read(is__);
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_StockInfSearch> begin_StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__StockInfSearch_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_StockInfSearch> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_StockInfSearch>(this, __StockInfSearch_name, StockInfSearch_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__StockInfSearch_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeString(ColNo);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void StockInfSearch_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_StockInfSearch cb__, Ice.ExceptionCallback excb__)
        {
            PT.MatterCls[] mat;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_StockInfSearch(out mat, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, mat, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_StockInfSumbit> begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat)
        {
            return begin_StockInfSumbit(type, stcPTCommon, mat, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_StockInfSumbit> begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_StockInfSumbit(type, stcPTCommon, mat, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_StockInfSumbit(type, stcPTCommon, mat, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_StockInfSumbit(type, stcPTCommon, mat, ctx__, true, cb__, cookie__);
        }

        private const string __StockInfSumbit_name = "StockInfSumbit";

        public int end_StockInfSumbit(out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __StockInfSumbit_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_StockInfSumbit> begin_StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__StockInfSumbit_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_StockInfSumbit> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_StockInfSumbit>(this, __StockInfSumbit_name, StockInfSumbit_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__StockInfSumbit_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(type);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                PT.MatterClsSeqHelper.write(os__, mat);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void StockInfSumbit_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_StockInfSumbit cb__, Ice.ExceptionCallback excb__)
        {
            int nResult;
            int ret__;
            try
            {
                ret__ = end_StockInfSumbit(out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_SubmitTruckInf> begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist)
        {
            return begin_SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_SubmitTruckInf> begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, ctx__, true, cb__, cookie__);
        }

        private const string __SubmitTruckInf_name = "SubmitTruckInf";

        public int end_SubmitTruckInf(out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __SubmitTruckInf_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_SubmitTruckInf> begin_SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__SubmitTruckInf_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_SubmitTruckInf> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_SubmitTruckInf>(this, __SubmitTruckInf_name, SubmitTruckInf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__SubmitTruckInf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                if(CarInf == null)
                {
                    PT.TruckCls tmp__ = new PT.TruckCls();
                    tmp__.write__(os__);
                }
                else
                {
                    CarInf.write__(os__);
                }
                os__.writeInt(WorkType);
                PT.MatterClsSeqHelper.write(os__, matlist);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void SubmitTruckInf_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_SubmitTruckInf cb__, Ice.ExceptionCallback excb__)
        {
            int nResult;
            int ret__;
            try
            {
                ret__ = end_SubmitTruckInf(out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_TruckInInf> begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo)
        {
            return begin_TruckInInf(stcPTCommon, CarInf, ProcessNo, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_TruckInInf> begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_TruckInInf(stcPTCommon, CarInf, ProcessNo, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TruckInInf(stcPTCommon, CarInf, ProcessNo, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TruckInInf(stcPTCommon, CarInf, ProcessNo, ctx__, true, cb__, cookie__);
        }

        private const string __TruckInInf_name = "TruckInInf";

        public int end_TruckInInf(out string cID, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __TruckInInf_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                cID = is__.readString();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_TruckInInf> begin_TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__TruckInInf_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_TruckInInf> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_TruckInInf>(this, __TruckInInf_name, TruckInInf_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__TruckInInf_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                if(CarInf == null)
                {
                    PT.TruckCls tmp__ = new PT.TruckCls();
                    tmp__.write__(os__);
                }
                else
                {
                    CarInf.write__(os__);
                }
                os__.writeInt(ProcessNo);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void TruckInInf_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_TruckInInf cb__, Ice.ExceptionCallback excb__)
        {
            string cID;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_TruckInInf(out cID, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, cID, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_TruckInOutAck> begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo)
        {
            return begin_TruckInOutAck(stcPTCommon, ProcessNo, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_TruckInOutAck> begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_TruckInOutAck(stcPTCommon, ProcessNo, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TruckInOutAck(stcPTCommon, ProcessNo, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TruckInOutAck(stcPTCommon, ProcessNo, ctx__, true, cb__, cookie__);
        }

        private const string __TruckInOutAck_name = "TruckInOutAck";

        public int end_TruckInOutAck(out int nResult, out PT.MatterCls[] matlist, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __TruckInOutAck_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                nResult = is__.readInt();
                matlist = PT.MatterClsSeqHelper.read(is__);
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_TruckInOutAck> begin_TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__TruckInOutAck_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_TruckInOutAck> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_TruckInOutAck>(this, __TruckInOutAck_name, TruckInOutAck_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__TruckInOutAck_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeInt(ProcessNo);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void TruckInOutAck_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_TruckInOutAck cb__, Ice.ExceptionCallback excb__)
        {
            int nResult;
            PT.MatterCls[] matlist;
            int ret__;
            try
            {
                ret__ = end_TruckInOutAck(out nResult, out matlist, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, nResult, matlist);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_TruckPos> begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck)
        {
            return begin_TruckPos(stcPTCommon, truck, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_TruckPos> begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_TruckPos(stcPTCommon, truck, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TruckPos(stcPTCommon, truck, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_TruckPos(stcPTCommon, truck, ctx__, true, cb__, cookie__);
        }

        private const string __TruckPos_name = "TruckPos";

        public int end_TruckPos(out PT.TruckCls Turck, out string cID, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __TruckPos_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                Turck = null;
                if(Turck == null)
                {
                    Turck = new PT.TruckCls();
                }
                Turck.read__(is__);
                cID = is__.readString();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_TruckPos> begin_TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__TruckPos_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_TruckPos> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_TruckPos>(this, __TruckPos_name, TruckPos_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__TruckPos_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                if(truck == null)
                {
                    PT.TruckCls tmp__ = new PT.TruckCls();
                    tmp__.write__(os__);
                }
                else
                {
                    truck.write__(os__);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void TruckPos_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_TruckPos cb__, Ice.ExceptionCallback excb__)
        {
            PT.TruckCls Turck;
            string cID;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_TruckPos(out Turck, out cID, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, Turck, cID, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_UsrLoginCheck> begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword)
        {
            return begin_UsrLoginCheck(stcPTCommon, cPassword, null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_UsrLoginCheck> begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_UsrLoginCheck(stcPTCommon, cPassword, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UsrLoginCheck(stcPTCommon, cPassword, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UsrLoginCheck(stcPTCommon, cPassword, ctx__, true, cb__, cookie__);
        }

        private const string __UsrLoginCheck_name = "UsrLoginCheck";

        public int end_UsrLoginCheck(out string cID, out int nRet, out int nResult, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __UsrLoginCheck_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                cID = is__.readString();
                nRet = is__.readInt();
                nResult = is__.readInt();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_UsrLoginCheck> begin_UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__UsrLoginCheck_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_UsrLoginCheck> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_UsrLoginCheck>(this, __UsrLoginCheck_name, UsrLoginCheck_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__UsrLoginCheck_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(stcPTCommon == null)
                {
                    PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                    tmp__.write__(os__);
                }
                else
                {
                    stcPTCommon.write__(os__);
                }
                os__.writeString(cPassword);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void UsrLoginCheck_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_UsrLoginCheck cb__, Ice.ExceptionCallback excb__)
        {
            string cID;
            int nRet;
            int nResult;
            int ret__;
            try
            {
                ret__ = end_UsrLoginCheck(out cID, out nRet, out nResult, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, cID, nRet, nResult);
            }
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_getSecTicksSinceUTC1970> begin_getSecTicksSinceUTC1970()
        {
            return begin_getSecTicksSinceUTC1970(null, false, null, null);
        }

        public Ice.AsyncResult<PT.Callback_PTInterface_getSecTicksSinceUTC1970> begin_getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getSecTicksSinceUTC1970(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getSecTicksSinceUTC1970(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getSecTicksSinceUTC1970(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getSecTicksSinceUTC1970(ctx__, true, cb__, cookie__);
        }

        private const string __getSecTicksSinceUTC1970_name = "getSecTicksSinceUTC1970";

        public long end_getSecTicksSinceUTC1970(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getSecTicksSinceUTC1970_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                long ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readLong();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<PT.Callback_PTInterface_getSecTicksSinceUTC1970> begin_getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getSecTicksSinceUTC1970_name);
            IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_getSecTicksSinceUTC1970> result__ =  new IceInternal.TwowayOutgoingAsync<PT.Callback_PTInterface_getSecTicksSinceUTC1970>(this, __getSecTicksSinceUTC1970_name, getSecTicksSinceUTC1970_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getSecTicksSinceUTC1970_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getSecTicksSinceUTC1970_completed__(Ice.AsyncResult r__, PT.Callback_PTInterface_getSecTicksSinceUTC1970 cb__, Ice.ExceptionCallback excb__)
        {
            long ret__;
            try
            {
                ret__ = end_getSecTicksSinceUTC1970(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PTInterfacePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PTInterfacePrx r = b as PTInterfacePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PTInterfacePrxHelper h = new PTInterfacePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PTInterfacePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PTInterfacePrx r = b as PTInterfacePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PTInterfacePrxHelper h = new PTInterfacePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PTInterfacePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PTInterfacePrxHelper h = new PTInterfacePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PTInterfacePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PTInterfacePrxHelper h = new PTInterfacePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PTInterfacePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PTInterfacePrx r = b as PTInterfacePrx;
            if(r == null)
            {
                PTInterfacePrxHelper h = new PTInterfacePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PTInterfacePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            PTInterfacePrxHelper h = new PTInterfacePrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::PT::PTInterface"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new PTInterfaceDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new PTInterfaceDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, PTInterfacePrx v__)
        {
            os__.writeProxy(v__);
        }

        public static PTInterfacePrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                PTInterfacePrxHelper result = new PTInterfacePrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace PT
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PTInterfaceDel_ : Ice.ObjectDel_
    {
        long getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int MatInfQuery(string cMAT, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int OutInventoryInfo(string bayno, out string id, out string area, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int MatInOut(string type, string tagValue, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace PT
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class PTInterfaceDelM_ : Ice.ObjectDelM_, PTInterfaceDel_
    {
        public int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("CheckPreSend", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeString(cMAT);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    cRetMessage = is__.readString();
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("DeleteWrongMat", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(CarInf == null)
                    {
                        PT.TruckCls tmp__ = new PT.TruckCls();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        CarInf.write__(os__);
                    }
                    os__.writeString(MATNO);
                    os__.writeInt(ProcessNo);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int MatInOut(string type, string tagValue, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("MatInOut", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(type);
                    os__.writeString(tagValue);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readString();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("MatInOutAckSearch", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeString(matno);
                    os__.writeString(type);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readString();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int MatInfQuery(string cMAT, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("MatInfQuery", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(cMAT);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("MatInfSearch", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeString(cMAT);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    mat = null;
                    int ret__;
                    if(mat == null)
                    {
                        mat = new PT.MatterCls();
                    }
                    mat.read__(is__);
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int OutInventoryInfo(string bayno, out string id, out string area, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("OutInventoryInfo", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(bayno);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    id = is__.readString();
                    area = is__.readString();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("OutSearch", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(type);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    matlist = PT.LstOutPlanHelper.read(is__);
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("PreSend2L3", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeString(cMAT);
                    os__.writeString(MT);
                    os__.writeString(cPresend);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    cID = is__.readString();
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("RecheckLIST", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(bayno);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    id = is__.readString();
                    LIST = PT.LstInventoryStocksHelper.read(is__);
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SearchMatInf", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    if(CarInf == null)
                    {
                        PT.TruckCls tmp__ = new PT.TruckCls();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        CarInf.write__(os__);
                    }
                    os__.writeInt(ProcessNo);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    matlist = PT.MatterClsSeqHelper.read(is__);
                    cID = is__.readString();
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("StockDiffSearch", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    mat = PT.MatterClsSeqHelper.read(is__);
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("StockInfSearch", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeString(ColNo);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    mat = PT.MatterClsSeqHelper.read(is__);
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("StockInfSumbit", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(type);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    PT.MatterClsSeqHelper.write(os__, mat);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("SubmitTruckInf", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    if(CarInf == null)
                    {
                        PT.TruckCls tmp__ = new PT.TruckCls();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        CarInf.write__(os__);
                    }
                    os__.writeInt(WorkType);
                    PT.MatterClsSeqHelper.write(os__, matlist);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("TruckInInf", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    if(CarInf == null)
                    {
                        PT.TruckCls tmp__ = new PT.TruckCls();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        CarInf.write__(os__);
                    }
                    os__.writeInt(ProcessNo);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    cID = is__.readString();
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("TruckInOutAck", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeInt(ProcessNo);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    nResult = is__.readInt();
                    matlist = PT.MatterClsSeqHelper.read(is__);
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("TruckPos", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    if(truck == null)
                    {
                        PT.TruckCls tmp__ = new PT.TruckCls();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        truck.write__(os__);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Turck = null;
                    int ret__;
                    if(Turck == null)
                    {
                        Turck = new PT.TruckCls();
                    }
                    Turck.read__(is__);
                    cID = is__.readString();
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("UsrLoginCheck", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(stcPTCommon == null)
                    {
                        PT.dtPTCommon tmp__ = new PT.dtPTCommon();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        stcPTCommon.write__(os__);
                    }
                    os__.writeString(cPassword);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    cID = is__.readString();
                    nRet = is__.readInt();
                    nResult = is__.readInt();
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public long getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getSecTicksSinceUTC1970", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    long ret__;
                    ret__ = is__.readLong();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace PT
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class PTInterfaceDelD_ : Ice.ObjectDelD_, PTInterfaceDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "CheckPreSend", Ice.OperationMode.Idempotent, context__);
            string cRetMessageHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.CheckPreSend(stcPTCommon, cMAT, out cRetMessageHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            cRetMessage = cRetMessageHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "DeleteWrongMat", Ice.OperationMode.Idempotent, context__);
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.DeleteWrongMat(CarInf, MATNO, ProcessNo, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int MatInOut(string type, string tagValue, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "MatInOut", Ice.OperationMode.Idempotent, context__);
            string nResultHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.MatInOut(type, tagValue, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "MatInOutAckSearch", Ice.OperationMode.Idempotent, context__);
            string nResultHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.MatInOutAckSearch(stcPTCommon, matno, type, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int MatInfQuery(string cMAT, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "MatInfQuery", Ice.OperationMode.Idempotent, context__);
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.MatInfQuery(cMAT, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "MatInfSearch", Ice.OperationMode.Idempotent, context__);
            PT.MatterCls matHolder__ = new PT.MatterCls();
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.MatInfSearch(stcPTCommon, cMAT, out matHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            mat = matHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int OutInventoryInfo(string bayno, out string id, out string area, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "OutInventoryInfo", Ice.OperationMode.Idempotent, context__);
            string idHolder__ = null;
            string areaHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.OutInventoryInfo(bayno, out idHolder__, out areaHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            id = idHolder__;
            area = areaHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "OutSearch", Ice.OperationMode.Idempotent, context__);
            PT.dtOutPlan[] matlistHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.OutSearch(type, out matlistHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            matlist = matlistHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "PreSend2L3", Ice.OperationMode.Idempotent, context__);
            string cIDHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.PreSend2L3(stcPTCommon, cMAT, MT, cPresend, out cIDHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            cID = cIDHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "RecheckLIST", Ice.OperationMode.Idempotent, context__);
            string idHolder__ = null;
            PT.inventoryStock[] LISTHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.RecheckLIST(bayno, out idHolder__, out LISTHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            id = idHolder__;
            LIST = LISTHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SearchMatInf", Ice.OperationMode.Idempotent, context__);
            PT.MatterCls[] matlistHolder__ = null;
            string cIDHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.SearchMatInf(stcPTCommon, CarInf, ProcessNo, out matlistHolder__, out cIDHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            matlist = matlistHolder__;
            cID = cIDHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "StockDiffSearch", Ice.OperationMode.Idempotent, context__);
            PT.MatterCls[] matHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.StockDiffSearch(out matHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            mat = matHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "StockInfSearch", Ice.OperationMode.Idempotent, context__);
            PT.MatterCls[] matHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.StockInfSearch(stcPTCommon, ColNo, out matHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            mat = matHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "StockInfSumbit", Ice.OperationMode.Idempotent, context__);
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.StockInfSumbit(type, stcPTCommon, mat, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "SubmitTruckInf", Ice.OperationMode.Idempotent, context__);
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "TruckInInf", Ice.OperationMode.Idempotent, context__);
            string cIDHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.TruckInInf(stcPTCommon, CarInf, ProcessNo, out cIDHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            cID = cIDHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "TruckInOutAck", Ice.OperationMode.Idempotent, context__);
            int nResultHolder__ = 0;
            PT.MatterCls[] matlistHolder__ = null;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.TruckInOutAck(stcPTCommon, ProcessNo, out nResultHolder__, out matlistHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            nResult = nResultHolder__;
            matlist = matlistHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "TruckPos", Ice.OperationMode.Idempotent, context__);
            PT.TruckCls TurckHolder__ = new PT.TruckCls();
            string cIDHolder__ = null;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.TruckPos(stcPTCommon, truck, out TurckHolder__, out cIDHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            Turck = TurckHolder__;
            cID = cIDHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "UsrLoginCheck", Ice.OperationMode.Idempotent, context__);
            string cIDHolder__ = null;
            int nRetHolder__ = 0;
            int nResultHolder__ = 0;
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.UsrLoginCheck(stcPTCommon, cPassword, out cIDHolder__, out nRetHolder__, out nResultHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            cID = cIDHolder__;
            nRet = nRetHolder__;
            nResult = nResultHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public long getSecTicksSinceUTC1970(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getSecTicksSinceUTC1970", Ice.OperationMode.Normal, context__);
            long result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PTInterface servant__ = null;
                try
                {
                    servant__ = (PTInterface)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getSecTicksSinceUTC1970(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace PT
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class PTInterfaceDisp_ : Ice.ObjectImpl, PTInterface
    {
        #region Slice operations

        public long getSecTicksSinceUTC1970()
        {
            return getSecTicksSinceUTC1970(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract long getSecTicksSinceUTC1970(Ice.Current current__);

        public int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult)
        {
            return UsrLoginCheck(stcPTCommon, cPassword, out cID, out nRet, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int UsrLoginCheck(PT.dtPTCommon stcPTCommon, string cPassword, out string cID, out int nRet, out int nResult, Ice.Current current__);

        public int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult)
        {
            return TruckPos(stcPTCommon, truck, out Turck, out cID, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int TruckPos(PT.dtPTCommon stcPTCommon, PT.TruckCls truck, out PT.TruckCls Turck, out string cID, out int nResult, Ice.Current current__);

        public int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult)
        {
            return TruckInInf(stcPTCommon, CarInf, ProcessNo, out cID, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int TruckInInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out string cID, out int nResult, Ice.Current current__);

        public int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult)
        {
            return SearchMatInf(stcPTCommon, CarInf, ProcessNo, out matlist, out cID, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SearchMatInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int ProcessNo, out PT.MatterCls[] matlist, out string cID, out int nResult, Ice.Current current__);

        public int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult)
        {
            return DeleteWrongMat(CarInf, MATNO, ProcessNo, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int DeleteWrongMat(PT.TruckCls CarInf, string MATNO, int ProcessNo, out int nResult, Ice.Current current__);

        public int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult)
        {
            return SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int SubmitTruckInf(PT.dtPTCommon stcPTCommon, PT.TruckCls CarInf, int WorkType, PT.MatterCls[] matlist, out int nResult, Ice.Current current__);

        public int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist)
        {
            return TruckInOutAck(stcPTCommon, ProcessNo, out nResult, out matlist, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int TruckInOutAck(PT.dtPTCommon stcPTCommon, int ProcessNo, out int nResult, out PT.MatterCls[] matlist, Ice.Current current__);

        public int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult)
        {
            return PreSend2L3(stcPTCommon, cMAT, MT, cPresend, out cID, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int PreSend2L3(PT.dtPTCommon stcPTCommon, string cMAT, string MT, string cPresend, out string cID, out int nResult, Ice.Current current__);

        public int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult)
        {
            return CheckPreSend(stcPTCommon, cMAT, out cRetMessage, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int CheckPreSend(PT.dtPTCommon stcPTCommon, string cMAT, out string cRetMessage, out int nResult, Ice.Current current__);

        public int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult)
        {
            return MatInfSearch(stcPTCommon, cMAT, out mat, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int MatInfSearch(PT.dtPTCommon stcPTCommon, string cMAT, out PT.MatterCls mat, out int nResult, Ice.Current current__);

        public int MatInfQuery(string cMAT, out int nResult)
        {
            return MatInfQuery(cMAT, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int MatInfQuery(string cMAT, out int nResult, Ice.Current current__);

        public int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult)
        {
            return StockInfSearch(stcPTCommon, ColNo, out mat, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int StockInfSearch(PT.dtPTCommon stcPTCommon, string ColNo, out PT.MatterCls[] mat, out int nResult, Ice.Current current__);

        public int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult)
        {
            return StockInfSumbit(type, stcPTCommon, mat, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int StockInfSumbit(string type, PT.dtPTCommon stcPTCommon, PT.MatterCls[] mat, out int nResult, Ice.Current current__);

        public int StockDiffSearch(out PT.MatterCls[] mat, out int nResult)
        {
            return StockDiffSearch(out mat, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int StockDiffSearch(out PT.MatterCls[] mat, out int nResult, Ice.Current current__);

        public int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult)
        {
            return OutSearch(type, out matlist, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int OutSearch(string type, out PT.dtOutPlan[] matlist, out int nResult, Ice.Current current__);

        public int OutInventoryInfo(string bayno, out string id, out string area)
        {
            return OutInventoryInfo(bayno, out id, out area, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int OutInventoryInfo(string bayno, out string id, out string area, Ice.Current current__);

        public int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST)
        {
            return RecheckLIST(bayno, out id, out LIST, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int RecheckLIST(string bayno, out string id, out PT.inventoryStock[] LIST, Ice.Current current__);

        public int MatInOut(string type, string tagValue, out string nResult)
        {
            return MatInOut(type, tagValue, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int MatInOut(string type, string tagValue, out string nResult, Ice.Current current__);

        public int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult)
        {
            return MatInOutAckSearch(stcPTCommon, matno, type, out nResult, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int MatInOutAckSearch(PT.dtPTCommon stcPTCommon, string matno, string type, out string nResult, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::PT::PTInterface"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getSecTicksSinceUTC1970___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            long ret__ = obj__.getSecTicksSinceUTC1970(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeLong(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus UsrLoginCheck___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            string cPassword;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            cPassword = is__.readString();
            inS__.endReadParams();
            string cID;
            int nRet;
            int nResult;
            int ret__ = obj__.UsrLoginCheck(stcPTCommon, cPassword, out cID, out nRet, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(cID);
            os__.writeInt(nRet);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus TruckPos___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            PT.TruckCls truck;
            truck = null;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            if(truck == null)
            {
                truck = new PT.TruckCls();
            }
            truck.read__(is__);
            inS__.endReadParams();
            PT.TruckCls Turck;
            string cID;
            int nResult;
            int ret__ = obj__.TruckPos(stcPTCommon, truck, out Turck, out cID, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(Turck == null)
            {
                PT.TruckCls tmp__ = new PT.TruckCls();
                tmp__.write__(os__);
            }
            else
            {
                Turck.write__(os__);
            }
            os__.writeString(cID);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus TruckInInf___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            PT.TruckCls CarInf;
            CarInf = null;
            int ProcessNo;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            if(CarInf == null)
            {
                CarInf = new PT.TruckCls();
            }
            CarInf.read__(is__);
            ProcessNo = is__.readInt();
            inS__.endReadParams();
            string cID;
            int nResult;
            int ret__ = obj__.TruckInInf(stcPTCommon, CarInf, ProcessNo, out cID, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(cID);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SearchMatInf___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            PT.TruckCls CarInf;
            CarInf = null;
            int ProcessNo;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            if(CarInf == null)
            {
                CarInf = new PT.TruckCls();
            }
            CarInf.read__(is__);
            ProcessNo = is__.readInt();
            inS__.endReadParams();
            PT.MatterCls[] matlist;
            string cID;
            int nResult;
            int ret__ = obj__.SearchMatInf(stcPTCommon, CarInf, ProcessNo, out matlist, out cID, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PT.MatterClsSeqHelper.write(os__, matlist);
            os__.writeString(cID);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus DeleteWrongMat___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.TruckCls CarInf;
            CarInf = null;
            string MATNO;
            int ProcessNo;
            if(CarInf == null)
            {
                CarInf = new PT.TruckCls();
            }
            CarInf.read__(is__);
            MATNO = is__.readString();
            ProcessNo = is__.readInt();
            inS__.endReadParams();
            int nResult;
            int ret__ = obj__.DeleteWrongMat(CarInf, MATNO, ProcessNo, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus SubmitTruckInf___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            PT.TruckCls CarInf;
            CarInf = null;
            int WorkType;
            PT.MatterCls[] matlist;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            if(CarInf == null)
            {
                CarInf = new PT.TruckCls();
            }
            CarInf.read__(is__);
            WorkType = is__.readInt();
            matlist = PT.MatterClsSeqHelper.read(is__);
            inS__.endReadParams();
            int nResult;
            int ret__ = obj__.SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus TruckInOutAck___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            int ProcessNo;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            ProcessNo = is__.readInt();
            inS__.endReadParams();
            int nResult;
            PT.MatterCls[] matlist;
            int ret__ = obj__.TruckInOutAck(stcPTCommon, ProcessNo, out nResult, out matlist, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(nResult);
            PT.MatterClsSeqHelper.write(os__, matlist);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus PreSend2L3___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            string cMAT;
            string MT;
            string cPresend;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            cMAT = is__.readString();
            MT = is__.readString();
            cPresend = is__.readString();
            inS__.endReadParams();
            string cID;
            int nResult;
            int ret__ = obj__.PreSend2L3(stcPTCommon, cMAT, MT, cPresend, out cID, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(cID);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus CheckPreSend___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            string cMAT;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            cMAT = is__.readString();
            inS__.endReadParams();
            string cRetMessage;
            int nResult;
            int ret__ = obj__.CheckPreSend(stcPTCommon, cMAT, out cRetMessage, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(cRetMessage);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus MatInfSearch___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            string cMAT;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            cMAT = is__.readString();
            inS__.endReadParams();
            PT.MatterCls mat;
            int nResult;
            int ret__ = obj__.MatInfSearch(stcPTCommon, cMAT, out mat, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(mat == null)
            {
                PT.MatterCls tmp__ = new PT.MatterCls();
                tmp__.write__(os__);
            }
            else
            {
                mat.write__(os__);
            }
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus MatInfQuery___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string cMAT;
            cMAT = is__.readString();
            inS__.endReadParams();
            int nResult;
            int ret__ = obj__.MatInfQuery(cMAT, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus StockInfSearch___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            string ColNo;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            ColNo = is__.readString();
            inS__.endReadParams();
            PT.MatterCls[] mat;
            int nResult;
            int ret__ = obj__.StockInfSearch(stcPTCommon, ColNo, out mat, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PT.MatterClsSeqHelper.write(os__, mat);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus StockInfSumbit___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string type;
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            PT.MatterCls[] mat;
            type = is__.readString();
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            mat = PT.MatterClsSeqHelper.read(is__);
            inS__.endReadParams();
            int nResult;
            int ret__ = obj__.StockInfSumbit(type, stcPTCommon, mat, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus StockDiffSearch___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.readEmptyParams();
            PT.MatterCls[] mat;
            int nResult;
            int ret__ = obj__.StockDiffSearch(out mat, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PT.MatterClsSeqHelper.write(os__, mat);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus OutSearch___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string type;
            type = is__.readString();
            inS__.endReadParams();
            PT.dtOutPlan[] matlist;
            int nResult;
            int ret__ = obj__.OutSearch(type, out matlist, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            PT.LstOutPlanHelper.write(os__, matlist);
            os__.writeInt(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus OutInventoryInfo___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string bayno;
            bayno = is__.readString();
            inS__.endReadParams();
            string id;
            string area;
            int ret__ = obj__.OutInventoryInfo(bayno, out id, out area, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(id);
            os__.writeString(area);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus RecheckLIST___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string bayno;
            bayno = is__.readString();
            inS__.endReadParams();
            string id;
            PT.inventoryStock[] LIST;
            int ret__ = obj__.RecheckLIST(bayno, out id, out LIST, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(id);
            PT.LstInventoryStocksHelper.write(os__, LIST);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus MatInOut___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string type;
            string tagValue;
            type = is__.readString();
            tagValue = is__.readString();
            inS__.endReadParams();
            string nResult;
            int ret__ = obj__.MatInOut(type, tagValue, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus MatInOutAckSearch___(PTInterface obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            PT.dtPTCommon stcPTCommon;
            stcPTCommon = null;
            string matno;
            string type;
            if(stcPTCommon == null)
            {
                stcPTCommon = new PT.dtPTCommon();
            }
            stcPTCommon.read__(is__);
            matno = is__.readString();
            type = is__.readString();
            inS__.endReadParams();
            string nResult;
            int ret__ = obj__.MatInOutAckSearch(stcPTCommon, matno, type, out nResult, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(nResult);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "CheckPreSend",
            "DeleteWrongMat",
            "MatInOut",
            "MatInOutAckSearch",
            "MatInfQuery",
            "MatInfSearch",
            "OutInventoryInfo",
            "OutSearch",
            "PreSend2L3",
            "RecheckLIST",
            "SearchMatInf",
            "StockDiffSearch",
            "StockInfSearch",
            "StockInfSumbit",
            "SubmitTruckInf",
            "TruckInInf",
            "TruckInOutAck",
            "TruckPos",
            "UsrLoginCheck",
            "getSecTicksSinceUTC1970",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return CheckPreSend___(this, inS__, current__);
                }
                case 1:
                {
                    return DeleteWrongMat___(this, inS__, current__);
                }
                case 2:
                {
                    return MatInOut___(this, inS__, current__);
                }
                case 3:
                {
                    return MatInOutAckSearch___(this, inS__, current__);
                }
                case 4:
                {
                    return MatInfQuery___(this, inS__, current__);
                }
                case 5:
                {
                    return MatInfSearch___(this, inS__, current__);
                }
                case 6:
                {
                    return OutInventoryInfo___(this, inS__, current__);
                }
                case 7:
                {
                    return OutSearch___(this, inS__, current__);
                }
                case 8:
                {
                    return PreSend2L3___(this, inS__, current__);
                }
                case 9:
                {
                    return RecheckLIST___(this, inS__, current__);
                }
                case 10:
                {
                    return SearchMatInf___(this, inS__, current__);
                }
                case 11:
                {
                    return StockDiffSearch___(this, inS__, current__);
                }
                case 12:
                {
                    return StockInfSearch___(this, inS__, current__);
                }
                case 13:
                {
                    return StockInfSumbit___(this, inS__, current__);
                }
                case 14:
                {
                    return SubmitTruckInf___(this, inS__, current__);
                }
                case 15:
                {
                    return TruckInInf___(this, inS__, current__);
                }
                case 16:
                {
                    return TruckInOutAck___(this, inS__, current__);
                }
                case 17:
                {
                    return TruckPos___(this, inS__, current__);
                }
                case 18:
                {
                    return UsrLoginCheck___(this, inS__, current__);
                }
                case 19:
                {
                    return getSecTicksSinceUTC1970___(this, inS__, current__);
                }
                case 20:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 21:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 22:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 23:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
